// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package databaseproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseAccessServiceClient is the client API for DatabaseAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseAccessServiceClient interface {
	//Stream response
	CourseRequest(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (DatabaseAccessService_CourseRequestClient, error)
}

type databaseAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseAccessServiceClient(cc grpc.ClientConnInterface) DatabaseAccessServiceClient {
	return &databaseAccessServiceClient{cc}
}

func (c *databaseAccessServiceClient) CourseRequest(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (DatabaseAccessService_CourseRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseAccessService_ServiceDesc.Streams[0], "/mailer.DatabaseAccessService/CourseRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseAccessServiceCourseRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseAccessService_CourseRequestClient interface {
	Recv() (*BigResponse, error)
	grpc.ClientStream
}

type databaseAccessServiceCourseRequestClient struct {
	grpc.ClientStream
}

func (x *databaseAccessServiceCourseRequestClient) Recv() (*BigResponse, error) {
	m := new(BigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatabaseAccessServiceServer is the server API for DatabaseAccessService service.
// All implementations must embed UnimplementedDatabaseAccessServiceServer
// for forward compatibility
type DatabaseAccessServiceServer interface {
	//Stream response
	CourseRequest(*CourseRequest, DatabaseAccessService_CourseRequestServer) error
	mustEmbedUnimplementedDatabaseAccessServiceServer()
}

// UnimplementedDatabaseAccessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseAccessServiceServer struct {
}

func (UnimplementedDatabaseAccessServiceServer) CourseRequest(*CourseRequest, DatabaseAccessService_CourseRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method CourseRequest not implemented")
}
func (UnimplementedDatabaseAccessServiceServer) mustEmbedUnimplementedDatabaseAccessServiceServer() {}

// UnsafeDatabaseAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseAccessServiceServer will
// result in compilation errors.
type UnsafeDatabaseAccessServiceServer interface {
	mustEmbedUnimplementedDatabaseAccessServiceServer()
}

func RegisterDatabaseAccessServiceServer(s grpc.ServiceRegistrar, srv DatabaseAccessServiceServer) {
	s.RegisterService(&DatabaseAccessService_ServiceDesc, srv)
}

func _DatabaseAccessService_CourseRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CourseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseAccessServiceServer).CourseRequest(m, &databaseAccessServiceCourseRequestServer{stream})
}

type DatabaseAccessService_CourseRequestServer interface {
	Send(*BigResponse) error
	grpc.ServerStream
}

type databaseAccessServiceCourseRequestServer struct {
	grpc.ServerStream
}

func (x *databaseAccessServiceCourseRequestServer) Send(m *BigResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DatabaseAccessService_ServiceDesc is the grpc.ServiceDesc for DatabaseAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailer.DatabaseAccessService",
	HandlerType: (*DatabaseAccessServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CourseRequest",
			Handler:       _DatabaseAccessService_CourseRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "databaseproto/db.proto",
}
